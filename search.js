window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "graphy", "modulename": "graphy", "kind": "module", "doc": "<p>Functions to create graphs and tables with python for gfs-z\u00fcrich.</p>\n\n<h2 id=\"installation\">Installation</h2>\n\n<p>In this project, we are using Pipenv for dependency management. Thus, you need the <code>pipenv</code> CLI tool installed on your computer:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">pipenv</span>\n</code></pre>\n</div>\n\n<p>As soon this package is installed, you can install all required packages for this project by executing the following command inside the root project folder:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">pipenv</span> <span class=\"n\">install</span>\n</code></pre>\n</div>\n\n<p>If you need another dependency, not yet defined in the <code>Pipfile</code>, you can install it using this command and it will also be added to the dependency list.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">pipenv</span> <span class=\"n\">install</span> <span class=\"p\">&lt;</span><span class=\"n\">package</span><span class=\"p\">&gt;</span>\n</code></pre>\n</div>\n\n<p>Now, to run the Python scripts, you will need to select the right kernel (name should start with <code>gfs-functions</code>) or if you are executing them using the CLI, you can switch to the virtual environment with the installed dependencies by running this command:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">pipenv</span> <span class=\"n\">shell</span>\n</code></pre>\n</div>\n\n<p>Afterwards you can use the default command to create a juptyer instance:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">jupyter</span> <span class=\"n\">notebook</span>\n</code></pre>\n</div>\n\n<p>Or if that does not work you can try the following command:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">pipenv</span> <span class=\"n\">run</span> <span class=\"n\">jupyter</span> <span class=\"n\">notebook</span>\n</code></pre>\n</div>\n\n<h2 id=\"developing\">Developing</h2>\n\n<p>Create package:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">python</span> <span class=\"n\">setup</span><span class=\"p\">.</span><span class=\"n\">py</span> <span class=\"n\">sdist</span> <span class=\"n\">bdist_wheel</span>\n</code></pre>\n</div>\n\n<p>Create package for development environment:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">python</span> <span class=\"n\">setup</span><span class=\"p\">.</span><span class=\"n\">py</span> <span class=\"n\">develop</span>\n</code></pre>\n</div>\n\n<p>List package content:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">tar</span> <span class=\"p\">-</span><span class=\"n\">-list</span> <span class=\"o\">-f</span> <span class=\"n\">dist</span><span class=\"p\">/</span><span class=\"n\">gfs-functions</span><span class=\"p\">-</span><span class=\"n\">1</span><span class=\"p\">.</span><span class=\"n\">0</span><span class=\"p\">.</span><span class=\"n\">tar</span><span class=\"p\">.</span><span class=\"n\">gz</span>\n</code></pre>\n</div>\n\n<p>Add documentation:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">pdoc</span>  <span class=\"p\">`</span>\n    <span class=\"p\">-</span><span class=\"n\">-output-dir</span> <span class=\"n\">docs</span> <span class=\"n\">graphy</span> <span class=\"p\">`</span>\n    <span class=\"p\">-</span><span class=\"n\">-logo</span> <span class=\"s2\">&quot;https://gfs-zh.ch/wp-content/uploads/2021/06/LOGO_gfs-zh_org-RGB.svg&quot;</span> <span class=\"p\">`</span>\n    <span class=\"p\">-</span><span class=\"n\">-favicon</span> <span class=\"s2\">&quot;https://gfs-zh.ch/wp-content/uploads/2022/09/favicon.png&quot;</span> <span class=\"p\">`</span>\n    <span class=\"n\">-d</span> <span class=\"n\">google</span> <span class=\"p\">`</span>\n    <span class=\"p\">-</span><span class=\"n\">-no-show-source</span>\n</code></pre>\n</div>\n"}, {"fullname": "graphy.start_presentation", "modulename": "graphy", "qualname": "start_presentation", "kind": "function", "doc": "<p>Creates a new presentation</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>name</strong>:  Changes the name of the presentation</p></li>\n<li><p><strong>df</strong>:  The current data file ~ usually df</p></li>\n<li><p><strong>meta</strong>:  The current meta data file ~ usually meta</p></li>\n<li><p><strong>output_path</strong>:  Changes path and name of the output files, defaults to \"../output/\"</p></li>\n<li><p><strong>color_path</strong>:  Sets path of color file, defaults to '../templates/color.json'</p></li>\n<li><p><strong>template_path</strong>:  Sets path of pptx-template file, defaults to '../templates/'</p></li>\n<li><p><strong>color_theme</strong>:  Sets color theme for graph. ~ 'test', 'gfs', defaults to 'standard'</p></li>\n<li><p><strong>value_labels_color</strong>:  Sets threshold for black or white label color. Use 0 for all black labels and 255 for all white. Use numbers between for a mix, defaults to 130</p></li>\n<li><p><strong>weight</strong>:  Turns weight on if weight variable name is added. ~ \"gewicht\", defaults to ''</p></li>\n<li><p><strong>bar_width_barchart</strong>:  Sets the width of the barchart bars, defaults to 0.7</p></li>\n<li><p><strong>bar_width_stacked_barchart</strong>:  Sets the width of the stacked barchart bars, defaults to 0.8</p></li>\n<li><p><strong>bar_gap_barchart</strong>:  Sets the gap between the bars within a group, defaults to 0.15</p></li>\n<li><p><strong>break_distance</strong>:  Sets the distance between the breaks, defaults to 0.5</p></li>\n<li><p><strong>count_name</strong>:  Changes the name of the count. ~ if \"K\" is passed in, counts look like \"K = 42\", defaults to 'N'</p></li>\n<li><p><strong>logo_side</strong>:  Changes the position of the logo on the presentation slides, ~ 'left', defaults to 'right'</p></li>\n<li><p><strong>export_svg</strong>:  Exports graphs as .svg files if True, defaults to False</p></li>\n<li><p><strong>standard_arguments</strong>:  Adds some standard arguments that normally don't need to be changed, defaults to {}</p></li>\n<li><p><strong>show_page_number</strong>:  Turns page number on PowerPoint on and off ~ True, defaults to False</p></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Returns a dictionary with presentation info, the presentation object and some info about the plot theme.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">meta</span><span class=\"p\">:</span> <span class=\"n\">pyreadstat</span><span class=\"o\">.</span><span class=\"n\">_readstat_parser</span><span class=\"o\">.</span><span class=\"n\">metadata_container</span>,</span><span class=\"param\">\t<span class=\"n\">output_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;./output/&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">color_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;./templates/color.json&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">template_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;./templates/&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">color_theme</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;standard&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">value_labels_color</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">130</span>,</span><span class=\"param\">\t<span class=\"n\">weight</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bar_width_barchart</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.7</span>,</span><span class=\"param\">\t<span class=\"n\">bar_width_stacked_barchart</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.8</span>,</span><span class=\"param\">\t<span class=\"n\">bar_gap_barchart</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.15</span>,</span><span class=\"param\">\t<span class=\"n\">break_distance</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.5</span>,</span><span class=\"param\">\t<span class=\"n\">count_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;N&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">logo_side</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;right&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">export_svg</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">standard_arguments</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">show_page_number</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "graphy.save_presentation", "modulename": "graphy", "qualname": "save_presentation", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">info</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "graphy.add_title_slide", "modulename": "graphy", "qualname": "add_title_slide", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">info</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "graphy.add_text_slide", "modulename": "graphy", "qualname": "add_text_slide", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">info</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">my_title</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;gfs-z\u00fcrich, Markt- &amp; Sozialforschung&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "graphy.show_summary", "modulename": "graphy", "qualname": "show_summary", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">meta</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "graphy.show_stats", "modulename": "graphy", "qualname": "show_stats", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">meta</span>, </span><span class=\"param\"><span class=\"n\">variable</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "graphy.create_barchart", "modulename": "graphy", "qualname": "create_barchart", "kind": "function", "doc": "<p>Creates a barchart</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>info (dict):</strong>  A dictionary with info about the presentation. Has info like number of slides, presentation name and the presentation object itself ~ usually info</li>\n<li><strong>variables (list):</strong>  A list of variables. If multiple are added, function doesn't accept any breaks. ~ ['AW2'] / ['AW1_1', 'AW1_2', ...]</li>\n<li><strong>breaks (list, optional):</strong>  A list of breaks. ~ ['alter_break', 'sex_break']. Defaults to None.</li>\n<li><strong>legend_break (list, optional):</strong>  A list of breaks. This is used to create the legend break if either \"mean\" == True or \"select_variable_levels\" has exactly one item ~ ['alter_break'] / [['alter_break']]. Defaults to None.</li>\n<li><strong>barchart_mean (bool, optional):</strong>  Toggles barchart type mean, where mean value of variable is shown. Defaults to False.</li>\n<li><strong>break_labels_rename (dict[str, str], optional):</strong>  Renames the breaks. ~ {'old_name': 'new_name'}. Defaults to None.</li>\n<li><strong>left_labels_rename (dict[str, str], optional):</strong>  Renames the labels of the different break levels. ~ {'old_name', 'new_name'}. Defaults to None.</li>\n<li><strong>legend_labels_rename (dict[str, str], optional):</strong>  Renames the labels of the different legend levels. ~ {'old_name', 'new_name'}. Defaults to None.</li>\n<li><strong>left_labels_wrap (int, optional):</strong>  Wraps the variable labels. Defaults to 50.</li>\n<li><strong>left_labels_width (int, optional):</strong>  Changes the space allocated to the y-label. Defaults to 999 (which means automatic).</li>\n<li><strong>show_mean (bool, optional):</strong>  Turns uses the mean of the variable as x-value and changes scale type from percentage to mean. ~ True. Defaults to False.</li>\n<li><strong>title_custom_text (str, optional):</strong>  Creates custom title text, if automatic text isn't desired.Defaults to 'auto'.</li>\n<li><strong>subtitle_custom_text (str, optional):</strong>  Creates custom subtitle text, if automatic text isn't desired. Defaults to 'auto'.</li>\n<li><strong>tag_custom_text (str, optional):</strong>  Creates custom tag text, if automatic text isn't desired. Defaults to 'auto'.</li>\n<li><strong>title_position (int, optional):</strong>  Sets the position of the title text. ~ 0 = don't show, 1, 2, 3 are possible positions on plot. Defaults to 1.</li>\n<li><strong>subtitle_position (int, optional):</strong>  Sets the position of the subtitle text. ~ 0 = don't show, 1, 2, 3 are possible positions on plot. Defaults to 2.</li>\n<li><strong>tag_position (int, optional):</strong>  Sets the position of the tag text. ~ 0 = don't show, 1, 2, 3 are possible positions on plot. Defaults to 3.</li>\n<li><strong>return_data (bool, optional):</strong>  Returns the data frame, that is used to construct the graph, so it can be viewed. The data frame will be printed out if the parameter is True. This doesn't affect the graph in any way. Defaults to False.</li>\n<li><strong>color_theme (str, optional):</strong>  Sets color theme for graph. ~ 'test', 'gfs'. Defaults to 'auto'.</li>\n<li><strong>color_type (str, optional):</strong>  Sets color value type. ~ 'diverging', 'single_hue'. Defaults to 'groups'.</li>\n<li><strong>color_direction (str, optional):</strong>  Sets direction of color pattern. ~ 'backward', defaults to 'forward'. Defaults to 'forward'.</li>\n<li><strong>value_labels_show_min (float, optional):</strong>  Sets threshold showing labels by %. Use 0 to show all labels and 100 to show none. Use numbers between for a mix. Defaults to 0.</li>\n<li><strong>value_labels_add_after (list[list[str]], optional):</strong>   Adds text after the value labels ~ [['text', 'text'], ['text', 'text']]. Defaults to None.</li>\n<li><strong>weight (str, optional):</strong>  Turns weight on if weight variable name is added. ~ \"gewicht\". Defaults to 'auto'.</li>\n<li><strong>order_by (dict, optional):</strong>  A dictionary. Orders the plot by any variable in the x data frame. ~ {'mean': 'asc'} / {1: 'desc'}. Defaults to None.</li>\n<li><strong>title_remove_before (str, optional):</strong>  Removes the label text before the given string. ~ \"? \" deletes everything up until and including the question mark. Defaults to ''.</li>\n<li><strong>title_remove_after (str, optional):</strong>  Removes the label text after the given string. ~ \". Bitte\" deletes everything after and including the punctuation mark that. Defaults to ''.</li>\n<li><strong>tag_add_before (str, optional):</strong>  Adds text before the tag text. ~ \"Meine Zusatzinfo, ', \" adds this string before tag. Defaults to ''.</li>\n<li><strong>subtitle_add_before (str, optional):</strong>  Adds text before the tag text. ~ \"Filter: F3 = 'Ja', \" adds this string before tag. Defaults to ''.</li>\n<li><strong>left_labels_remove_before (str, optional):</strong>  Removes the label text before the given string. ~ \"? \" deletes everything up until and including the question mark. Defaults to ''.</li>\n<li><strong>left_labels_remove_after (str, optional):</strong>  Removes the label text after the given string. ~ \". Bitte\" deletes everything after and including the punctuation mark. Defaults to ''.</li>\n<li><strong>bar_gap (int, optional):</strong>  Sets the gap between the bars within a group. Defaults to 0.15.</li>\n<li><strong>bar_width (float, optional):</strong>  Sets the width of the bars. Defaults to 0.7.</li>\n<li><strong>bar_min_size (float, optional):</strong>  Sets the minimum size of the show bars. Only affects plot if <code>show_all_bars</code> is set to \"False\". Defaults to 0.</li>\n<li><strong>break_distance (float, optional):</strong>  Sets the distance between the breaks. Defaults to 0.5</li>\n<li><strong>label_size (float, optional):</strong>  Sets the size of labels. Defaults to 16.</li>\n<li><strong>value_labels_size (float, optional):</strong>  Sets the size of value labels. Defaults to 999.</li>\n<li><strong>legend_labels_size (float, optional):</strong>  Sets the size of legend. Defaults to 14.</li>\n<li><strong>show_legend (bool, optional):</strong>  Turns legend on and off. ~ False. Defaults to True.</li>\n<li><strong>show_total (bool, optional):</strong>  Turns total bar on and off. ~ False. Defaults to True.</li>\n<li><strong>show_count (bool, optional):</strong>  Turns counts in variable labels on and off. ~ True. Defaults to False.</li>\n<li><strong>show_all_bars (bool, optional):</strong>  Turns counts bars with zero observations on and off. ~ True. Defaults to False.</li>\n<li><strong>select_variable_levels (list[int], optional):</strong>  A list variable levels used to select and order variables. ~ [2, 1, 99999997]. Defaults to None.</li>\n<li><strong>special_variables (list[int], optional):</strong>  A list variable levels that will be treated differently. They will appear gray in the graph and have not effect on the mean calculation. ~ [16, 99999997]. Defaults to [96, 97, 98, 99999996, 99999997, 99999998].</li>\n<li><strong>standard_arguments (dict, optional):</strong>  Adds some standard arguments that normally don't need to be changed. Defaults to None.</li>\n<li><strong>df (pd.DataFrame, optional):</strong>  The current data file ~ usually df. Defaults to 'auto'.</li>\n<li><strong>meta (pyreadstat._readstat_parser.metadata_container, optional):</strong>  The current meta data file ~ usually meta. Defaults to 'auto'.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Optional[tuple]: returns df and meta objects if return_data is True</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">info</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">variables</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">breaks</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">legend_break</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">barchart_mean</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">break_labels_rename</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">left_labels_rename</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">legend_labels_rename</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">left_labels_wrap</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">50</span>,</span><span class=\"param\">\t<span class=\"n\">left_labels_width</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">999</span>,</span><span class=\"param\">\t<span class=\"n\">show_mean</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">title_custom_text</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;auto&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">subtitle_custom_text</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;auto&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">tag_custom_text</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;auto&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">title_position</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">subtitle_position</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">tag_position</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">return_data</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">color_theme</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;auto&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">color_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;groups&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">color_direction</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;forward&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">value_labels_show_min</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">value_labels_add_after</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">weight</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;auto&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">order_by</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">title_remove_before</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">title_remove_after</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">tag_add_before</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">subtitle_add_before</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">left_labels_remove_before</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">left_labels_remove_after</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bar_gap</span><span class=\"o\">=</span><span class=\"mi\">999</span>,</span><span class=\"param\">\t<span class=\"n\">bar_width</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">999</span>,</span><span class=\"param\">\t<span class=\"n\">bar_min_size</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">break_distance</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">999</span>,</span><span class=\"param\">\t<span class=\"n\">label_size</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">16</span>,</span><span class=\"param\">\t<span class=\"n\">value_labels_size</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">999</span>,</span><span class=\"param\">\t<span class=\"n\">legend_labels_size</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">14</span>,</span><span class=\"param\">\t<span class=\"n\">show_legend</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">show_total</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">show_count</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">show_all_bars</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">select_variable_levels</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">special_variables</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">96</span><span class=\"p\">,</span> <span class=\"mi\">97</span><span class=\"p\">,</span> <span class=\"mi\">98</span><span class=\"p\">,</span> <span class=\"mi\">99999996</span><span class=\"p\">,</span> <span class=\"mi\">99999997</span><span class=\"p\">,</span> <span class=\"mi\">99999998</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">standard_arguments</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;auto&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">meta</span><span class=\"p\">:</span> <span class=\"n\">pyreadstat</span><span class=\"o\">.</span><span class=\"n\">_readstat_parser</span><span class=\"o\">.</span><span class=\"n\">metadata_container</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;auto&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "graphy.create_stacked_barchart", "modulename": "graphy", "qualname": "create_stacked_barchart", "kind": "function", "doc": "<p>Creates a stacked barchart</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>info</strong>:  A dictionary with info about the presentation. Has info like number of slides, presentation name and the presentation object itself ~ usually info</p></li>\n<li><p><strong>df</strong>:  The current data file ~ usually df</p></li>\n<li><p><strong>meta</strong>:  The current meta data file ~ usually meta</p></li>\n<li><p><strong>variables</strong>:  A list of variables. If multiple are added, function doesn't accept any breaks. ~ ['AW2'] / ['AW1_1', 'AW1_2', ...]</p></li>\n<li><p><strong>breaks</strong>:  A list of breaks. ~ ['alter_break', 'sex_break'], defaults to []</p></li>\n<li><p><strong>break_labels_rename: Renames the breaks. ~ {'old_name'</strong>:  'new_name'}, defaults to {}</p></li>\n<li><p><strong>left_labels_rename</strong>:  Renames the labels of the different break levels. ~ {'old_name', 'new_name'}, defaults to {}</p></li>\n<li><p><strong>legend_labels_rename</strong>:  Renames the labels of the variable in legend. ~ {'old_name', 'new_name'}, defaults to {}</p></li>\n<li><p><strong>left_labels_wrap</strong>:  Wraps the variable labels, defaults to 50</p></li>\n<li><p><strong>left_labels_width</strong>:  Changes the space allocated to the y-label, defaults to 999 (which means automatic)</p></li>\n<li><p><strong>show_mean</strong>:  Turns the mean annotations on. ~ True, defaults to False</p></li>\n<li><p><strong>title_custom_text</strong>:  Creates custom title text, if automatic text isn't desired, defaults to \"auto\"</p></li>\n<li><p><strong>subtitle_custom_text</strong>:  Creates custom subtitle text, if automatic text isn't desired, defaults to \"auto\"</p></li>\n<li><p><strong>tag_custom_text</strong>:  Creates custom tag text, if automatic text isn't desired, defaults to \"auto\"</p></li>\n<li><p><strong>title_position</strong>:  Sets the position of the title text. ~ 0 = don't show, 1, 2, 3 are possible positions on plot, defaults to 1</p></li>\n<li><p><strong>subtitle_position</strong>:  Sets the position of the subtitle text. ~ 0 = don't show, 1, 2, 3 are possible positions on plot, defaults to 2</p></li>\n<li><p><strong>tag_position</strong>:  Sets the position of the tag text. ~ 0 = don't show, 1, 2, 3 are possible positions on plot, defaults to 3</p></li>\n<li><p><strong>return_data</strong>:  Returns the data frame, that is used to construct the graph, so it can be viewed. The data frame will be printed out if the parameter is True. This doesn't affect the graph in any way. defaults to False</p></li>\n<li><p><strong>color_theme</strong>:  Sets color theme for graph. ~ 'test', 'gfs', defaults to 'standard'</p></li>\n<li><p><strong>color_type</strong>:  Sets color value type. ~ 'groups', 'single_hue', defaults to 'diverging'</p></li>\n<li><p><strong>color_direction</strong>:  Sets direction of color pattern. ~ 'backward', defaults to 'forward'</p></li>\n<li><p><strong>value_labels_color</strong>:  Sets threshold for black or white label color. Use 0 for all black labels and 255 for all white. Use numbers between for a mix, defaults to 130</p></li>\n<li><p><strong>value_labels_show_min</strong>:  Sets threshold showing labels by %. Use 0 to show all labels and 100 to show none. Use numbers between for a mix, defaults to 0.8</p></li>\n<li><p><strong>weight</strong>:  Turns weight on if weight variable name is added. ~ \"gewicht\", defaults to ''</p></li>\n<li><p><strong>order_by: A dictionary. Orders the plot by any variable in the x data frame. ~ {'mean': 'asc'} / {1</strong>:  'desc'}, defaults to {}</p></li>\n<li><p><strong>title_remove_before</strong>:  Removes the label text before the given string. ~ \"? \" deletes everything up until and including the question mark, defaults to ''</p></li>\n<li><p><strong>title_remove_after</strong>:  Removes the label text after the given string. ~ \". Bitte\" deletes everything after and including the punctuation mark that, defaults to ''</p></li>\n<li><p><strong>tag_add_before</strong>:  Adds text before the tag text. ~ \"Meine Zusatzinfo, ', \" adds this string before tag, defaults to ''</p></li>\n<li><p><strong>subtitle_add_before: Adds text before the tag text. ~ \"Filter</strong>:  F3 = 'Ja', \" adds this string before tag, defaults to ''</p></li>\n<li><p><strong>left_labels_remove_before</strong>:  Removes the label text before the given string. ~ \"? \" deletes everything up until and including the question mark, defaults to ''</p></li>\n<li><p><strong>left_labels_remove_after</strong>:  Removes the label text after the given string. ~ \". Bitte\" deletes everything after and including the punctuation mark that, defaults to ''</p></li>\n<li><p><strong>bar_width</strong>:  Sets the width of the bars, defaults to 0.8</p></li>\n<li><p><strong>break_distance</strong>:  Sets the distance between the breaks, defaults to 0.5</p></li>\n<li><p><strong>label_size</strong>:  Sets the size of labels, defaults to 16</p></li>\n<li><p><strong>value_labels_size</strong>:  Sets the size of value labels, defaults to 16</p></li>\n<li><p><strong>legend_labels_size</strong>:  Sets the size of legend, defaults to 12</p></li>\n<li><p><strong>show_legend</strong>:  Turns legend on and off. ~ False, defaults to True</p></li>\n<li><p><strong>show_total</strong>:  Turns total bar on and off. ~ False, defaults to True</p></li>\n<li><p><strong>show_count</strong>:  Turns counts in variable labels on and off. ~ True, defaults to False</p></li>\n<li><p><strong>mean_name</strong>:  Changes name written above the mean values, defaults to 'MW'</p></li>\n<li><p><strong>mean_transform: Changes the size of the mean values with a transformation. lambda n: -n + 2 changes n to the negative value of n and adds 2, defaults to lambda n</strong>:  n</p></li>\n<li><p><strong>select_variable_levels</strong>:  A list variable levels used to select and order variables. ~ [2, 1, 99999997], defaults to []</p></li>\n<li><p><strong>special_variables</strong>:  A list variable levels that will be treated differently. They will appear gray in the graph and have not effect on the mean calculation. ~ [16, 99999997], defaults to [96, 97, 98, 99999996, 99999997, 99999998]</p></li>\n<li><p><strong>standard_arguments</strong>:  Adds some standard arguments that normally don't need to be changed, defaults to None</p></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>If return_data is on it returns the plot data, so it can be viewed.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">info</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">variables</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">breaks</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">break_labels_rename</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">left_labels_rename</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">legend_labels_rename</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">left_labels_wrap</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">50</span>,</span><span class=\"param\">\t<span class=\"n\">left_labels_width</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">999</span>,</span><span class=\"param\">\t<span class=\"n\">show_mean</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">title_custom_text</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;auto&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">subtitle_custom_text</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;auto&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">tag_custom_text</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;auto&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">title_position</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">subtitle_position</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">tag_position</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">return_data</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">color_theme</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;auto&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">color_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;diverging&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">color_direction</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;forward&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">value_labels_color</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">999</span>,</span><span class=\"param\">\t<span class=\"n\">value_labels_show_min</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.8</span>,</span><span class=\"param\">\t<span class=\"n\">weight</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;auto&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">order_by</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">title_remove_before</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">title_remove_after</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">tag_add_before</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">subtitle_add_before</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">left_labels_remove_before</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">left_labels_remove_after</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bar_width</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">999</span>,</span><span class=\"param\">\t<span class=\"n\">break_distance</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">999</span>,</span><span class=\"param\">\t<span class=\"n\">label_size</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">16</span>,</span><span class=\"param\">\t<span class=\"n\">value_labels_size</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">16</span>,</span><span class=\"param\">\t<span class=\"n\">legend_labels_size</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">14</span>,</span><span class=\"param\">\t<span class=\"n\">show_legend</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">show_total</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">show_count</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">mean_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;MW&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">mean_transform</span><span class=\"p\">:</span> <span class=\"n\">function</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"o\">&lt;</span><span class=\"k\">lambda</span><span class=\"o\">&gt;&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">select_variable_levels</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">special_variables</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">96</span><span class=\"p\">,</span> <span class=\"mi\">97</span><span class=\"p\">,</span> <span class=\"mi\">98</span><span class=\"p\">,</span> <span class=\"mi\">99999996</span><span class=\"p\">,</span> <span class=\"mi\">99999997</span><span class=\"p\">,</span> <span class=\"mi\">99999998</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">standard_arguments</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;auto&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">meta</span><span class=\"p\">:</span> <span class=\"n\">pyreadstat</span><span class=\"o\">.</span><span class=\"n\">_readstat_parser</span><span class=\"o\">.</span><span class=\"n\">metadata_container</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;auto&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "graphy.create_piechart", "modulename": "graphy", "qualname": "create_piechart", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">info</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">variables</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">breaks</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">break_labels_rename</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">left_labels_rename</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">legend_labels_rename</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">left_labels_wrap</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">50</span>,</span><span class=\"param\">\t<span class=\"n\">left_labels_width</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">999</span>,</span><span class=\"param\">\t<span class=\"n\">show_mean</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">title_custom_text</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;auto&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">subtitle_custom_text</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;auto&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">tag_custom_text</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;auto&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">title_position</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">subtitle_position</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">tag_position</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">return_data</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">color_theme</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;auto&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">color_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;diverging&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">color_direction</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;forward&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">value_labels_color</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">999</span>,</span><span class=\"param\">\t<span class=\"n\">value_labels_show_min</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.8</span>,</span><span class=\"param\">\t<span class=\"n\">weight</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;auto&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">order_by</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">title_remove_before</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">title_remove_after</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">tag_add_before</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">subtitle_add_before</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">left_labels_remove_before</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">left_labels_remove_after</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bar_width</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">999</span>,</span><span class=\"param\">\t<span class=\"n\">break_distance</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">999</span>,</span><span class=\"param\">\t<span class=\"n\">label_size</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">16</span>,</span><span class=\"param\">\t<span class=\"n\">value_labels_size</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">16</span>,</span><span class=\"param\">\t<span class=\"n\">legend_labels_size</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">12</span>,</span><span class=\"param\">\t<span class=\"n\">show_legend</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">show_total</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">show_count</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">select_variable_levels</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">special_variables</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">96</span><span class=\"p\">,</span> <span class=\"mi\">97</span><span class=\"p\">,</span> <span class=\"mi\">98</span><span class=\"p\">,</span> <span class=\"mi\">99999996</span><span class=\"p\">,</span> <span class=\"mi\">99999997</span><span class=\"p\">,</span> <span class=\"mi\">99999998</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">standard_arguments</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;auto&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">meta</span><span class=\"p\">:</span> <span class=\"n\">pyreadstat</span><span class=\"o\">.</span><span class=\"n\">_readstat_parser</span><span class=\"o\">.</span><span class=\"n\">metadata_container</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;auto&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "graphy.create_barchart", "modulename": "graphy.create_barchart", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "graphy.create_barchart.create_barchart", "modulename": "graphy.create_barchart", "qualname": "create_barchart", "kind": "function", "doc": "<p>Creates a barchart</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>info (dict):</strong>  A dictionary with info about the presentation. Has info like number of slides, presentation name and the presentation object itself ~ usually info</li>\n<li><strong>variables (list):</strong>  A list of variables. If multiple are added, function doesn't accept any breaks. ~ ['AW2'] / ['AW1_1', 'AW1_2', ...]</li>\n<li><strong>breaks (list, optional):</strong>  A list of breaks. ~ ['alter_break', 'sex_break']. Defaults to None.</li>\n<li><strong>legend_break (list, optional):</strong>  A list of breaks. This is used to create the legend break if either \"mean\" == True or \"select_variable_levels\" has exactly one item ~ ['alter_break'] / [['alter_break']]. Defaults to None.</li>\n<li><strong>barchart_mean (bool, optional):</strong>  Toggles barchart type mean, where mean value of variable is shown. Defaults to False.</li>\n<li><strong>break_labels_rename (dict[str, str], optional):</strong>  Renames the breaks. ~ {'old_name': 'new_name'}. Defaults to None.</li>\n<li><strong>left_labels_rename (dict[str, str], optional):</strong>  Renames the labels of the different break levels. ~ {'old_name', 'new_name'}. Defaults to None.</li>\n<li><strong>legend_labels_rename (dict[str, str], optional):</strong>  Renames the labels of the different legend levels. ~ {'old_name', 'new_name'}. Defaults to None.</li>\n<li><strong>left_labels_wrap (int, optional):</strong>  Wraps the variable labels. Defaults to 50.</li>\n<li><strong>left_labels_width (int, optional):</strong>  Changes the space allocated to the y-label. Defaults to 999 (which means automatic).</li>\n<li><strong>show_mean (bool, optional):</strong>  Turns uses the mean of the variable as x-value and changes scale type from percentage to mean. ~ True. Defaults to False.</li>\n<li><strong>title_custom_text (str, optional):</strong>  Creates custom title text, if automatic text isn't desired.Defaults to 'auto'.</li>\n<li><strong>subtitle_custom_text (str, optional):</strong>  Creates custom subtitle text, if automatic text isn't desired. Defaults to 'auto'.</li>\n<li><strong>tag_custom_text (str, optional):</strong>  Creates custom tag text, if automatic text isn't desired. Defaults to 'auto'.</li>\n<li><strong>title_position (int, optional):</strong>  Sets the position of the title text. ~ 0 = don't show, 1, 2, 3 are possible positions on plot. Defaults to 1.</li>\n<li><strong>subtitle_position (int, optional):</strong>  Sets the position of the subtitle text. ~ 0 = don't show, 1, 2, 3 are possible positions on plot. Defaults to 2.</li>\n<li><strong>tag_position (int, optional):</strong>  Sets the position of the tag text. ~ 0 = don't show, 1, 2, 3 are possible positions on plot. Defaults to 3.</li>\n<li><strong>return_data (bool, optional):</strong>  Returns the data frame, that is used to construct the graph, so it can be viewed. The data frame will be printed out if the parameter is True. This doesn't affect the graph in any way. Defaults to False.</li>\n<li><strong>color_theme (str, optional):</strong>  Sets color theme for graph. ~ 'test', 'gfs'. Defaults to 'auto'.</li>\n<li><strong>color_type (str, optional):</strong>  Sets color value type. ~ 'diverging', 'single_hue'. Defaults to 'groups'.</li>\n<li><strong>color_direction (str, optional):</strong>  Sets direction of color pattern. ~ 'backward', defaults to 'forward'. Defaults to 'forward'.</li>\n<li><strong>value_labels_show_min (float, optional):</strong>  Sets threshold showing labels by %. Use 0 to show all labels and 100 to show none. Use numbers between for a mix. Defaults to 0.</li>\n<li><strong>value_labels_add_after (list[list[str]], optional):</strong>   Adds text after the value labels ~ [['text', 'text'], ['text', 'text']]. Defaults to None.</li>\n<li><strong>weight (str, optional):</strong>  Turns weight on if weight variable name is added. ~ \"gewicht\". Defaults to 'auto'.</li>\n<li><strong>order_by (dict, optional):</strong>  A dictionary. Orders the plot by any variable in the x data frame. ~ {'mean': 'asc'} / {1: 'desc'}. Defaults to None.</li>\n<li><strong>title_remove_before (str, optional):</strong>  Removes the label text before the given string. ~ \"? \" deletes everything up until and including the question mark. Defaults to ''.</li>\n<li><strong>title_remove_after (str, optional):</strong>  Removes the label text after the given string. ~ \". Bitte\" deletes everything after and including the punctuation mark that. Defaults to ''.</li>\n<li><strong>tag_add_before (str, optional):</strong>  Adds text before the tag text. ~ \"Meine Zusatzinfo, ', \" adds this string before tag. Defaults to ''.</li>\n<li><strong>subtitle_add_before (str, optional):</strong>  Adds text before the tag text. ~ \"Filter: F3 = 'Ja', \" adds this string before tag. Defaults to ''.</li>\n<li><strong>left_labels_remove_before (str, optional):</strong>  Removes the label text before the given string. ~ \"? \" deletes everything up until and including the question mark. Defaults to ''.</li>\n<li><strong>left_labels_remove_after (str, optional):</strong>  Removes the label text after the given string. ~ \". Bitte\" deletes everything after and including the punctuation mark. Defaults to ''.</li>\n<li><strong>bar_gap (int, optional):</strong>  Sets the gap between the bars within a group. Defaults to 0.15.</li>\n<li><strong>bar_width (float, optional):</strong>  Sets the width of the bars. Defaults to 0.7.</li>\n<li><strong>bar_min_size (float, optional):</strong>  Sets the minimum size of the show bars. Only affects plot if <code>show_all_bars</code> is set to \"False\". Defaults to 0.</li>\n<li><strong>break_distance (float, optional):</strong>  Sets the distance between the breaks. Defaults to 0.5</li>\n<li><strong>label_size (float, optional):</strong>  Sets the size of labels. Defaults to 16.</li>\n<li><strong>value_labels_size (float, optional):</strong>  Sets the size of value labels. Defaults to 999.</li>\n<li><strong>legend_labels_size (float, optional):</strong>  Sets the size of legend. Defaults to 14.</li>\n<li><strong>show_legend (bool, optional):</strong>  Turns legend on and off. ~ False. Defaults to True.</li>\n<li><strong>show_total (bool, optional):</strong>  Turns total bar on and off. ~ False. Defaults to True.</li>\n<li><strong>show_count (bool, optional):</strong>  Turns counts in variable labels on and off. ~ True. Defaults to False.</li>\n<li><strong>show_all_bars (bool, optional):</strong>  Turns counts bars with zero observations on and off. ~ True. Defaults to False.</li>\n<li><strong>select_variable_levels (list[int], optional):</strong>  A list variable levels used to select and order variables. ~ [2, 1, 99999997]. Defaults to None.</li>\n<li><strong>special_variables (list[int], optional):</strong>  A list variable levels that will be treated differently. They will appear gray in the graph and have not effect on the mean calculation. ~ [16, 99999997]. Defaults to [96, 97, 98, 99999996, 99999997, 99999998].</li>\n<li><strong>standard_arguments (dict, optional):</strong>  Adds some standard arguments that normally don't need to be changed. Defaults to None.</li>\n<li><strong>df (pd.DataFrame, optional):</strong>  The current data file ~ usually df. Defaults to 'auto'.</li>\n<li><strong>meta (pyreadstat._readstat_parser.metadata_container, optional):</strong>  The current meta data file ~ usually meta. Defaults to 'auto'.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Optional[tuple]: returns df and meta objects if return_data is True</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">info</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">variables</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">breaks</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">legend_break</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">barchart_mean</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">break_labels_rename</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">left_labels_rename</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">legend_labels_rename</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">left_labels_wrap</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">50</span>,</span><span class=\"param\">\t<span class=\"n\">left_labels_width</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">999</span>,</span><span class=\"param\">\t<span class=\"n\">show_mean</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">title_custom_text</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;auto&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">subtitle_custom_text</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;auto&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">tag_custom_text</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;auto&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">title_position</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">subtitle_position</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">tag_position</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">return_data</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">color_theme</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;auto&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">color_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;groups&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">color_direction</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;forward&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">value_labels_show_min</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">value_labels_add_after</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">weight</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;auto&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">order_by</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">title_remove_before</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">title_remove_after</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">tag_add_before</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">subtitle_add_before</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">left_labels_remove_before</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">left_labels_remove_after</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bar_gap</span><span class=\"o\">=</span><span class=\"mi\">999</span>,</span><span class=\"param\">\t<span class=\"n\">bar_width</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">999</span>,</span><span class=\"param\">\t<span class=\"n\">bar_min_size</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">break_distance</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">999</span>,</span><span class=\"param\">\t<span class=\"n\">label_size</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">16</span>,</span><span class=\"param\">\t<span class=\"n\">value_labels_size</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">999</span>,</span><span class=\"param\">\t<span class=\"n\">legend_labels_size</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">14</span>,</span><span class=\"param\">\t<span class=\"n\">show_legend</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">show_total</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">show_count</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">show_all_bars</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">select_variable_levels</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">special_variables</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">96</span><span class=\"p\">,</span> <span class=\"mi\">97</span><span class=\"p\">,</span> <span class=\"mi\">98</span><span class=\"p\">,</span> <span class=\"mi\">99999996</span><span class=\"p\">,</span> <span class=\"mi\">99999997</span><span class=\"p\">,</span> <span class=\"mi\">99999998</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">standard_arguments</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;auto&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">meta</span><span class=\"p\">:</span> <span class=\"n\">pyreadstat</span><span class=\"o\">.</span><span class=\"n\">_readstat_parser</span><span class=\"o\">.</span><span class=\"n\">metadata_container</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;auto&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "graphy.create_barchart.create_barchart_df", "modulename": "graphy.create_barchart", "qualname": "create_barchart_df", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">info</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">variables</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">breaks</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">legend_break</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">meta</span><span class=\"p\">:</span> <span class=\"n\">pyreadstat</span><span class=\"o\">.</span><span class=\"n\">_readstat_parser</span><span class=\"o\">.</span><span class=\"n\">metadata_container</span>,</span><span class=\"param\">\t<span class=\"n\">break_labels_rename</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">left_labels_wrap</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">weight</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">order_by</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">left_labels_remove_before</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">left_labels_remove_after</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">label_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">select_variable_levels</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">show_count</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">left_labels_rename</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">legend_labels_rename</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">special_variables</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">barchart_mean</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">show_mean</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "graphy.create_barchart.create_barchart_graph", "modulename": "graphy.create_barchart", "qualname": "create_barchart_graph", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">info</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">meta</span><span class=\"p\">:</span> <span class=\"n\">pyreadstat</span><span class=\"o\">.</span><span class=\"n\">_readstat_parser</span><span class=\"o\">.</span><span class=\"n\">metadata_container</span>,</span><span class=\"param\">\t<span class=\"n\">variables</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">show_mean</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">color_theme</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">color_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">color_direction</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">bar_width</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">break_distance</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">value_labels_show_min</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">label_size</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">value_labels_size</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">legend_labels_size</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">show_legend</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">show_total</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">order_by</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">left_labels_width</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">bar_gap</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">breaks</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">special_variables</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">show_all_bars</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">select_variable_levels</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">bar_min_size</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">value_labels_add_after</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "graphy.create_piechart", "modulename": "graphy.create_piechart", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "graphy.create_piechart.create_piechart", "modulename": "graphy.create_piechart", "qualname": "create_piechart", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">info</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">variables</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">breaks</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">break_labels_rename</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">left_labels_rename</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">legend_labels_rename</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">left_labels_wrap</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">50</span>,</span><span class=\"param\">\t<span class=\"n\">left_labels_width</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">999</span>,</span><span class=\"param\">\t<span class=\"n\">show_mean</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">title_custom_text</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;auto&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">subtitle_custom_text</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;auto&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">tag_custom_text</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;auto&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">title_position</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">subtitle_position</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">tag_position</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">return_data</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">color_theme</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;auto&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">color_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;diverging&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">color_direction</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;forward&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">value_labels_color</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">999</span>,</span><span class=\"param\">\t<span class=\"n\">value_labels_show_min</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.8</span>,</span><span class=\"param\">\t<span class=\"n\">weight</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;auto&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">order_by</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">title_remove_before</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">title_remove_after</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">tag_add_before</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">subtitle_add_before</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">left_labels_remove_before</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">left_labels_remove_after</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bar_width</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">999</span>,</span><span class=\"param\">\t<span class=\"n\">break_distance</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">999</span>,</span><span class=\"param\">\t<span class=\"n\">label_size</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">16</span>,</span><span class=\"param\">\t<span class=\"n\">value_labels_size</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">16</span>,</span><span class=\"param\">\t<span class=\"n\">legend_labels_size</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">12</span>,</span><span class=\"param\">\t<span class=\"n\">show_legend</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">show_total</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">show_count</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">select_variable_levels</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">special_variables</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">96</span><span class=\"p\">,</span> <span class=\"mi\">97</span><span class=\"p\">,</span> <span class=\"mi\">98</span><span class=\"p\">,</span> <span class=\"mi\">99999996</span><span class=\"p\">,</span> <span class=\"mi\">99999997</span><span class=\"p\">,</span> <span class=\"mi\">99999998</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">standard_arguments</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;auto&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">meta</span><span class=\"p\">:</span> <span class=\"n\">pyreadstat</span><span class=\"o\">.</span><span class=\"n\">_readstat_parser</span><span class=\"o\">.</span><span class=\"n\">metadata_container</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;auto&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "graphy.create_piechart.create_piechart_df", "modulename": "graphy.create_piechart", "qualname": "create_piechart_df", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">info</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">variables</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">breaks</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">meta</span><span class=\"p\">:</span> <span class=\"n\">pyreadstat</span><span class=\"o\">.</span><span class=\"n\">_readstat_parser</span><span class=\"o\">.</span><span class=\"n\">metadata_container</span>,</span><span class=\"param\">\t<span class=\"n\">break_labels_rename</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">left_labels_wrap</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">weight</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">order_by</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">left_labels_remove_before</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">left_labels_remove_after</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">label_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">select_variable_levels</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">show_count</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">left_labels_rename</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">special_variables</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">legend_labels_rename</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "graphy.create_piechart.create_piechart_graph", "modulename": "graphy.create_piechart", "qualname": "create_piechart_graph", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">info</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">meta</span><span class=\"p\">:</span> <span class=\"n\">pyreadstat</span><span class=\"o\">.</span><span class=\"n\">_readstat_parser</span><span class=\"o\">.</span><span class=\"n\">metadata_container</span>,</span><span class=\"param\">\t<span class=\"n\">variables</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">show_mean</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">color_theme</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">color_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">color_direction</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">value_labels_color</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">bar_width</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">break_distance</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">value_labels_show_min</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">label_size</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">value_labels_size</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">legend_labels_size</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">show_legend</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">show_total</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">left_labels_width</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">special_variables</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "graphy.create_stacked_barchart", "modulename": "graphy.create_stacked_barchart", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "graphy.create_stacked_barchart.create_stacked_barchart", "modulename": "graphy.create_stacked_barchart", "qualname": "create_stacked_barchart", "kind": "function", "doc": "<p>Creates a stacked barchart</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>info</strong>:  A dictionary with info about the presentation. Has info like number of slides, presentation name and the presentation object itself ~ usually info</p></li>\n<li><p><strong>df</strong>:  The current data file ~ usually df</p></li>\n<li><p><strong>meta</strong>:  The current meta data file ~ usually meta</p></li>\n<li><p><strong>variables</strong>:  A list of variables. If multiple are added, function doesn't accept any breaks. ~ ['AW2'] / ['AW1_1', 'AW1_2', ...]</p></li>\n<li><p><strong>breaks</strong>:  A list of breaks. ~ ['alter_break', 'sex_break'], defaults to []</p></li>\n<li><p><strong>break_labels_rename: Renames the breaks. ~ {'old_name'</strong>:  'new_name'}, defaults to {}</p></li>\n<li><p><strong>left_labels_rename</strong>:  Renames the labels of the different break levels. ~ {'old_name', 'new_name'}, defaults to {}</p></li>\n<li><p><strong>legend_labels_rename</strong>:  Renames the labels of the variable in legend. ~ {'old_name', 'new_name'}, defaults to {}</p></li>\n<li><p><strong>left_labels_wrap</strong>:  Wraps the variable labels, defaults to 50</p></li>\n<li><p><strong>left_labels_width</strong>:  Changes the space allocated to the y-label, defaults to 999 (which means automatic)</p></li>\n<li><p><strong>show_mean</strong>:  Turns the mean annotations on. ~ True, defaults to False</p></li>\n<li><p><strong>title_custom_text</strong>:  Creates custom title text, if automatic text isn't desired, defaults to \"auto\"</p></li>\n<li><p><strong>subtitle_custom_text</strong>:  Creates custom subtitle text, if automatic text isn't desired, defaults to \"auto\"</p></li>\n<li><p><strong>tag_custom_text</strong>:  Creates custom tag text, if automatic text isn't desired, defaults to \"auto\"</p></li>\n<li><p><strong>title_position</strong>:  Sets the position of the title text. ~ 0 = don't show, 1, 2, 3 are possible positions on plot, defaults to 1</p></li>\n<li><p><strong>subtitle_position</strong>:  Sets the position of the subtitle text. ~ 0 = don't show, 1, 2, 3 are possible positions on plot, defaults to 2</p></li>\n<li><p><strong>tag_position</strong>:  Sets the position of the tag text. ~ 0 = don't show, 1, 2, 3 are possible positions on plot, defaults to 3</p></li>\n<li><p><strong>return_data</strong>:  Returns the data frame, that is used to construct the graph, so it can be viewed. The data frame will be printed out if the parameter is True. This doesn't affect the graph in any way. defaults to False</p></li>\n<li><p><strong>color_theme</strong>:  Sets color theme for graph. ~ 'test', 'gfs', defaults to 'standard'</p></li>\n<li><p><strong>color_type</strong>:  Sets color value type. ~ 'groups', 'single_hue', defaults to 'diverging'</p></li>\n<li><p><strong>color_direction</strong>:  Sets direction of color pattern. ~ 'backward', defaults to 'forward'</p></li>\n<li><p><strong>value_labels_color</strong>:  Sets threshold for black or white label color. Use 0 for all black labels and 255 for all white. Use numbers between for a mix, defaults to 130</p></li>\n<li><p><strong>value_labels_show_min</strong>:  Sets threshold showing labels by %. Use 0 to show all labels and 100 to show none. Use numbers between for a mix, defaults to 0.8</p></li>\n<li><p><strong>weight</strong>:  Turns weight on if weight variable name is added. ~ \"gewicht\", defaults to ''</p></li>\n<li><p><strong>order_by: A dictionary. Orders the plot by any variable in the x data frame. ~ {'mean': 'asc'} / {1</strong>:  'desc'}, defaults to {}</p></li>\n<li><p><strong>title_remove_before</strong>:  Removes the label text before the given string. ~ \"? \" deletes everything up until and including the question mark, defaults to ''</p></li>\n<li><p><strong>title_remove_after</strong>:  Removes the label text after the given string. ~ \". Bitte\" deletes everything after and including the punctuation mark that, defaults to ''</p></li>\n<li><p><strong>tag_add_before</strong>:  Adds text before the tag text. ~ \"Meine Zusatzinfo, ', \" adds this string before tag, defaults to ''</p></li>\n<li><p><strong>subtitle_add_before: Adds text before the tag text. ~ \"Filter</strong>:  F3 = 'Ja', \" adds this string before tag, defaults to ''</p></li>\n<li><p><strong>left_labels_remove_before</strong>:  Removes the label text before the given string. ~ \"? \" deletes everything up until and including the question mark, defaults to ''</p></li>\n<li><p><strong>left_labels_remove_after</strong>:  Removes the label text after the given string. ~ \". Bitte\" deletes everything after and including the punctuation mark that, defaults to ''</p></li>\n<li><p><strong>bar_width</strong>:  Sets the width of the bars, defaults to 0.8</p></li>\n<li><p><strong>break_distance</strong>:  Sets the distance between the breaks, defaults to 0.5</p></li>\n<li><p><strong>label_size</strong>:  Sets the size of labels, defaults to 16</p></li>\n<li><p><strong>value_labels_size</strong>:  Sets the size of value labels, defaults to 16</p></li>\n<li><p><strong>legend_labels_size</strong>:  Sets the size of legend, defaults to 12</p></li>\n<li><p><strong>show_legend</strong>:  Turns legend on and off. ~ False, defaults to True</p></li>\n<li><p><strong>show_total</strong>:  Turns total bar on and off. ~ False, defaults to True</p></li>\n<li><p><strong>show_count</strong>:  Turns counts in variable labels on and off. ~ True, defaults to False</p></li>\n<li><p><strong>mean_name</strong>:  Changes name written above the mean values, defaults to 'MW'</p></li>\n<li><p><strong>mean_transform: Changes the size of the mean values with a transformation. lambda n: -n + 2 changes n to the negative value of n and adds 2, defaults to lambda n</strong>:  n</p></li>\n<li><p><strong>select_variable_levels</strong>:  A list variable levels used to select and order variables. ~ [2, 1, 99999997], defaults to []</p></li>\n<li><p><strong>special_variables</strong>:  A list variable levels that will be treated differently. They will appear gray in the graph and have not effect on the mean calculation. ~ [16, 99999997], defaults to [96, 97, 98, 99999996, 99999997, 99999998]</p></li>\n<li><p><strong>standard_arguments</strong>:  Adds some standard arguments that normally don't need to be changed, defaults to None</p></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>If return_data is on it returns the plot data, so it can be viewed.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">info</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">variables</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">breaks</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">break_labels_rename</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">left_labels_rename</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">legend_labels_rename</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">left_labels_wrap</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">50</span>,</span><span class=\"param\">\t<span class=\"n\">left_labels_width</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">999</span>,</span><span class=\"param\">\t<span class=\"n\">show_mean</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">title_custom_text</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;auto&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">subtitle_custom_text</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;auto&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">tag_custom_text</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;auto&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">title_position</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">subtitle_position</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">tag_position</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">return_data</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">color_theme</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;auto&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">color_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;diverging&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">color_direction</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;forward&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">value_labels_color</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">999</span>,</span><span class=\"param\">\t<span class=\"n\">value_labels_show_min</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.8</span>,</span><span class=\"param\">\t<span class=\"n\">weight</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;auto&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">order_by</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">title_remove_before</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">title_remove_after</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">tag_add_before</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">subtitle_add_before</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">left_labels_remove_before</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">left_labels_remove_after</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bar_width</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">999</span>,</span><span class=\"param\">\t<span class=\"n\">break_distance</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">999</span>,</span><span class=\"param\">\t<span class=\"n\">label_size</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">16</span>,</span><span class=\"param\">\t<span class=\"n\">value_labels_size</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">16</span>,</span><span class=\"param\">\t<span class=\"n\">legend_labels_size</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">14</span>,</span><span class=\"param\">\t<span class=\"n\">show_legend</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">show_total</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">show_count</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">mean_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;MW&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">mean_transform</span><span class=\"p\">:</span> <span class=\"n\">function</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"o\">&lt;</span><span class=\"k\">lambda</span><span class=\"o\">&gt;&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">select_variable_levels</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">special_variables</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">96</span><span class=\"p\">,</span> <span class=\"mi\">97</span><span class=\"p\">,</span> <span class=\"mi\">98</span><span class=\"p\">,</span> <span class=\"mi\">99999996</span><span class=\"p\">,</span> <span class=\"mi\">99999997</span><span class=\"p\">,</span> <span class=\"mi\">99999998</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">standard_arguments</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;auto&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">meta</span><span class=\"p\">:</span> <span class=\"n\">pyreadstat</span><span class=\"o\">.</span><span class=\"n\">_readstat_parser</span><span class=\"o\">.</span><span class=\"n\">metadata_container</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;auto&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "graphy.create_stacked_barchart.create_stacked_barchart_df", "modulename": "graphy.create_stacked_barchart", "qualname": "create_stacked_barchart_df", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">info</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">variables</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">breaks</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">meta</span><span class=\"p\">:</span> <span class=\"n\">pyreadstat</span><span class=\"o\">.</span><span class=\"n\">_readstat_parser</span><span class=\"o\">.</span><span class=\"n\">metadata_container</span>,</span><span class=\"param\">\t<span class=\"n\">break_labels_rename</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">left_labels_wrap</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">weight</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">order_by</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">left_labels_remove_before</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">left_labels_remove_after</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">label_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">select_variable_levels</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">show_count</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">left_labels_rename</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">special_variables</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">legend_labels_rename</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "graphy.create_stacked_barchart.create_graph_text", "modulename": "graphy.create_stacked_barchart", "qualname": "create_graph_text", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">fig</span><span class=\"p\">:</span> <span class=\"n\">plotly</span><span class=\"o\">.</span><span class=\"n\">graph_objs</span><span class=\"o\">.</span><span class=\"n\">_figure</span><span class=\"o\">.</span><span class=\"n\">Figure</span>,</span><span class=\"param\">\t<span class=\"n\">info</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">position_1_text</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">position_2_text</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">position_3_text</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "graphy.create_stacked_barchart.create_stacked_barchart_graph", "modulename": "graphy.create_stacked_barchart", "qualname": "create_stacked_barchart_graph", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">info</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">meta</span><span class=\"p\">:</span> <span class=\"n\">pyreadstat</span><span class=\"o\">.</span><span class=\"n\">_readstat_parser</span><span class=\"o\">.</span><span class=\"n\">metadata_container</span>,</span><span class=\"param\">\t<span class=\"n\">variables</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">show_mean</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">color_theme</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">color_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">color_direction</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">value_labels_color</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">bar_width</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">break_distance</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">value_labels_show_min</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">label_size</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">value_labels_size</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">legend_labels_size</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">show_legend</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">show_total</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">left_labels_width</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">special_variables</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">mean_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">mean_transform</span><span class=\"p\">:</span> <span class=\"n\">function</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();